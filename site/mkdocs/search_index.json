{
    "docs": [
        {
            "location": "/", 
            "text": "Quick Start Manual\n\n\nWhat is Livera\n\n\n\n\nWelcome to start the new adventure with Hicat!! Happy hacks. :p\n\n\nIn a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the \nArduino\n community. It is also a good platform for building \nvisual driven robotics.\n\n\nWe've provided libraries which contain \nmachine vision\n related APIs such as:\n\n\n\n\n720hd video and photo capturing\nprocessing\n\n\nOpenCV enabled Color-Sensitive and Object-Tracking.\n\n\nWifi enabled wireless control (this can work with the iot!) \n\n\nImage capturing and data recording onto the onboard sd card \n\n\nMobile observation and manipulation from our custom apps( web-based and native)\n\n\nProgrammable and open source.\n\n\n\n\nwhat Livera could do:\n\n\n\n\nFuture development:\n\n\nIt is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future.\n\n\nWhen we saw the article of How a \nJapanese cucumber farmer is using deep learning to sort cucumbers.\n we think Livera should be best machine vision front-end part for \nimage capturing and openCV pre-processing\n.\n\n\nWith the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world \nR2D2\n or \nBB8\n.\n\n\nIn conclusion:\n\n\n\n\nTheme based advance \nrobotic kit\n.\n\n\nMore advance image capturing and processing capability\n\n\nNatural language virtual assitant\n\n\nImage streaming and processing \ncloud\n \n\n\n\n\nUser Manual\n\n\nPower:\n \n\n\n\n\nLIVERA allows mulitpul ways of power supply\n\n\n\n\n3.7V lipo battery (No higher voltage)\n\n\nUSB Port (MCU)\n\n\nI/O port(VIN)\n\n\n\n\nHock Up Camera Module:\n \n\n\n\n\nThe Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable.\n\n\nThere are \nwhite symbols\n on top of every module, always remember to match the symbol while plugs the Camera module. \n\n\nYou could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build something like pan-tilt enabled Robot. \n\n\nConnect to Livera(access point):\n \n\n\n\n\nPower up Livera, give a few second to boot, the WIFI access point hostname \nhicat_xxxxxx\n should show up on your PC/MOBILE's wifi list. The default wifi password is: \n88888888\n \n\n\nOnce you connected to the wifi, you could try out the host API web page by IP address: 192.168.1.1\n\n\nYou could let Livera access to your local wifi(station mode) by the API web  \n192.168.1.1\n or web app \n192.168.1.1/mmc/webapp/index.html\n(the address\n/www/mmc/\n is the directory of mounted sd card address within Livera Linux, which also means you could build your own web application and copy it to the sd card, Livera will automaticly host it for you)\n\n\nYou could also change Livera's wifi name through \nlinux command line tool\n: Once you connected to LIVERA, you could Telnet into the Linux system within Livera, follow the section \nAccess into Linux(3518E)\n below, within the \n/hicat/\n folder you should find the \nlaunch.sh\n tool, run the program \n./launch.sh ap SSID password\n, or through web app.\n\n\nStation WIFI Mode:\n \n\n\n\n\nyou could let Livera connected to your \nlocal wifi hotspot\n through the web API, btw we have provide a program call \n'imhere'\n to let your got the new IP address of Livera.\n\n\nweb app: \n192.168.1.1/mmc/webapp/index.html\n(this web app should placed in the \nsd card\n, could be download on \nhttps://github.com/hicat-tech/webapp\n) offers station method.\n\n\nTest Video Feature:\n \n\n\n\n\nLIVERA has two video streaming mode \nRTSP/MJPEG\n, RTSP stands for advence \nH.264 codec raw video streaming\n which works well with our Android app or any video Players which accepted RTSP streaming protocol(suggest to use VLC player) with this IP:\nrtsp://192.168.1.1/hicat.264\n. \n\n\nMJPEG\n would be a \nWEB friendly\n video format. Once you successfully boot up Livera and connected the WIFI, you can go to the web API page \n192.168.1.1\n to test the board's functions with your web browser, btw Chrome would be the best choice.\n\n\nGo to web API page: \n192.168.1.1\n, hit the link: MJPEG Mode, you could view the live video stream via the link: \nhttp://192.168.1.1:8080\n, suggest use chrome browser to visit, also you could \nchange the video resolution\n by press the links, this resolution you choose would work for \nboth RTSP and MJPG Mode\n.\n\n\nIf you using the webapp, the custom web app which stay in the sd card and would show up here:\n192.168.1.1/mmc/webapp/index.html\n. Choose the \nMJPG MODE\n from the webapp's top right switch button, and hit the \nLiveView\n button to get Live MJPG video stream from Livera. \n\n\nAccess into Linux(3518E):\n Livera accept \ntelnet\n connections, when you connected to Livera through WIFI, you could open up your terminal, type:\n\n\ntelnet 192.168.1.1       //if you let the board connected to the router you should find the correct IP address\n\n//User:root\n//passward:(hit return directly)\n\ncd /hicat/   //firmware directory\n./launch.sh   //Main script for main operation: video setting/mount sd card\n\ncd /www/mmc  //SD card directory\n\n\n\n\nbeside the internet ways, you could also go \nserial communication\n through the given \nUART\n port on Livera. \n\n\nReset Livera:\n \n\n\n\n\n\n\nwifi reset:\n hold the reset buttom \nRST-PBC\n, you would see the led light \nSTAT\n flashing per second, count for \n3 seconds\n \nps: very careful to not let it flash more than 10 seconds,\n once you see the led flash faster, the wifi \nhicat_xxxxxx\n would comes up in your wifi list.\n\n\n\n\n\n\nfactory reset:\n make sure there is a folder named \nhicat_failsafe.tar\n, if so, hold the reset buttom \nRST-PBC\n, you would see the led light \nSTAT\n flashing per second, count for \n10 seconds\n, once you see the led flash faster, you would get a brand new Livera.\n\n\n\n\n\n\nSD Card:\n\n\nCaution:\n if you have the \nSD card which comes with the Kits\n, the needed file has already been \ninstalled\n, the below instruction shows how to set up a \nnew card\n.\n\n\nmount sd card:\n any new sd card with format(vfat\nfat32) would be auto mounted. if not, stick it into the sd card slot and follow the steps below.\n\n\n\n\ngoto \n\n\nfollow the above step\naccess into Linux(3518E)\nto telnet into Livera(simular like ssh) \n\n\ngoto the address \n\n\n\n\n`cd /hicat/` \n\n\n\n\n\n\nwithin the \nhicat\n directory you should find the command line tool named \nlaunsh.sh\n \n\n\nthen go \n\n\n\n\n./launch.sh sd\n\n//you should see 4 options `format|mount|umount|hicatEx`, `format` means format the sd card into `fat32` file system which works like this command below:\n\n ./launch.sh sd format\n\n\n\n\n\nmount\numount would let you mount the sd card to \n/www/mmc\n directory, hicatEx would helps you to depackage the \nhicatEx.tar\n (put it into sd card before you go \nhicatEx\n) which contains some important programs for Livera's system. \n- do \nformat\n first(format the sd card into fat32 in your pc/mac would be okay), then go \nmount\n, finally \nhicatEx\n.\n- once you finished format and mount the sd card there will be you could chose to put the   \nOpenCV lib\n into \nopencv\n folder incase for opencv demo.\n\n\nAndroid APP:\n\n\nAPP main page:\n\n\n\n\nWe've provided a custom android app for Livera, you could download it on our github page: \nhttps://github.com/hicat-tech/livera-android\n, the APP could help you liveview video, control robots, and access to livera's web app.\n\n\nDo not forget the turn the livera into \nRTSP(H264) Mode\n before live viewing the video or access into robot control.\n\n\nWeb app:\n\n\n\n\nThe web app provides functions like Video recording, Live streaming, Livera setting, \n\n\nWhat an amazing feature about livera is that it could \nserve web pages\n as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on \nVUE.js\n, the app would work as Livera's command panel.\n\n\nTo use the web app you could go download the web app \nhere:https://github.com/hicat-tech/webapp\n\n\nThe web server within Livera also provide \nREST API\n which allows you to communicate with Livera through AJAX, have a look at detailed description within \nAPI GUIDE\n.\n\n\nHardware\n\n\nLivera\n\n\nLivera's given I/O port has connected into \nMCU(Atmel 32u4)\n, and the pin layout is pretty much likely to \nArduino Mini\n, you could program it with arduino IDE through the given \nUSB port\n, select the board to \narduino leonardo\n.\n\n\n\n\nWe've also placed a mpu6050 6-axie accelerometer on Livera, this would help in case of self-balance vehicle, there is 3 I/O port been connected MCU(32u4), there are I2C(D2:SDA,D3:SCL) and interrupt(D7)\n\n\nLivera Hardware Architecture:\n\n\n\n\nArduino(MCU) I/O Pin Indicate:\n\n\n\n\nMotor Driver\n\n\n\n\nPort Indicator:\n \nMotor Driver -\n Hicat.Livera\n\n\n\n\nMotor Port 1(M1):\n \nM1-1 -\n A5\n, \nM1-2 -\n A4\n.\n\n\nMotor Port 2(M2):\n \nM2-1 -\n A3\n, \nM2-2 -\n A2\n.\n\n\nMotor Port 3(M3):\n \nM3-1 -\n D8\n, \nM3-2 -\n D6\n.\n\n\n\n\nMotor Port 4(M4):\n \nM4-1 -\n D5\n, \nM4-2 -\n D4\n.\n\n\n\n\n\n\nServo Motor Port:\n \n11 -\n D11, 10 -\n D10, 9 -\n D9, 13 -\n D13\n\n\n\n\n\n\nThe Livera Motor Driver was designed specially for Livera, so that you can directly plug onto Livera, in this way you would get almost everything you need for a \nrobotic system\n.\n\n\nLivera Motor Driver can power up \n4 DC motors\n and \n3 Servo Motors\n, with external power input. \n\n\nThe Robot kit Assembly Guide\n\n\n\n\nLike the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of \nphysical building and wiring,\n it might take around \n25 minutes\n to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.\n\n\nParts list\n\n\n\n\n\n\nThe Livera Robot kit comes with following parts:\n\n\n\n\nBoards:\n HICAT.Livera Boardx1 Livera Motor Driver Boardx1\n\n\nCamera:\n Livera Camera Extend Cablex1 Livera Camera Modulex1\n\n\nStorage:\n2G SD Card with firmware built in\n\n\nGuidebook:\n Livera GuideBookx1 Livera Robot Assembly GuideBookx1\n\n\nPower:\n 9V Lipo Battery and Bat Carrier\n\n\nMotor:\n E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2\n\n\nStructure bits:\n Robot Base Acrylic Panels set, Omni-directional Wheel Set \n\n\nScrews:\n M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 \n\n\nOUTPUT:\n LASER Beanx1\n\n\nAccessories:\n Stickersx1, USB Cablex1, Screwdriver(+,-)x1\n\n\n\n\nVideo Tutorial\n\nWe've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:\n\n\n\n\nPyhsical Assembly\n\n\nWebapp Guide\n\n\n\n\n\n    \n\n\n\n\n\nStep 1: Base panel build\n\n\n\n\nUnpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.\n\n\n\n\nRobot Base Acrylic Panel x1\n\n\nDC Motor + Motor Carrier x2\n\n\nOmni-directional Wheel Set x1\n\n\nM2x15(+6)mm Nylon Stud x4\n\n\nM2x6mm Nylon Stud x4\n\n\nM2x6(+6)mm Nylon Stud x4\n\n\nM2 Nylon Nut x4\n\n\n\n\nNotice:\n All the Stud could be install by hand, doesn't require and tools.\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\nAssemble up the \nOmni-direction Wheel Set\n like the picture shows, then close up with the \nCover bit\n, waiting for screw on the \nBase Panel.\n \n\n\n\n\n\n\n\n\nInstall the motor on base panel:\n carefully place the \nM2 Nut\n onto the \nMotor Carrier's slot\n, than catch the \nDC Motor\n and match to the hole on the \nBase Panle\n, notice to keep the \n+\n sign on top as the left top of the pic shows, using \nM2x6(+6) Stud\n to screw through from the other side of the panel.\n\n\nInstall the Structure bit:\n place the \nM2x15(+6) Stud\n on top of the \nBase panel\n, then let the \n6mm screw bit\n through the hole and screw into the \nM2x6mm Stud.\n\n\n\n\nStep 2: Body build\n\n\n\n\n\n\nInstall the Livera Motor Driver:\n simply place by matching to the \nStud.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\n\n\nInstall HICAT.Livera with Extend Cable:\n carefully stack \nLivera\n on top of \nLivera Motor Driver,\n do check for the \nI/O ports\n and the \noutline\n to see weather it is matched to the \nLivera Motor Driver.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top of Livera.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard.\n\n\nStep 3: Top build\n\n\n\n\n\n\nInstall the top Acrylic Panel:\n place the \nTop Acrylic Panel\n, fix the panle by screw the \nM2x6(+6)mm Stud\n on top.\n\n\nStick the Power case and Servo:\n unpack the \n3M Sticker,\n stick the conponents as the image shows.\n\n\nConnect Power:\n connect the 2.54mm Power connector from \nPower case\n to \nLivera Motor Driver.\n\n\n\n\n\n\n\n\nInstall the Camera pan-tilt:\n screw the Servo Arm Set form the \nEMAX Servo set\n on the \nCamera Pan-tilt.\n\n\nInstall Camera Module:\n carefully place the camera module on the \nAcrylic Camera Pan-tilt\n, using \nM2 Rivet\n to fix it.\n\n\nInstall Camera Extend Cable and Laser Bean:\n install the conponents as the picture shows, notice that the \ndirection\n of the camera module should be \nmatch together\n according to the \nindicate drawings.\n\n\n\n\nStep 4: Wiring\n\n\n\n\n\n\nWiring:\n wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the \nDC Motor\n wring, you would need to use the screwdriver to fix the wire into the adapter.\n\n\nInstall SD card:\n put the \nSD card\n into the SD slot.\n\n\n\n\n\n\n\n\nInstall Battery:\n put the \n9v chargable battery\n into the \nPower Case.\n\n\nPower up to init the Servo:\n switch on the \nPower Switch\n From the Motor Driver, wait until heard \ntwo movement\n from the \nServo,\n then put the \nCamera Pan-tilt\n on the \nServo\n in a \nhorizon direction,\n screw it up using the smallest screw from the Servo Box.\n\n\nEnjoy:\n pick up you cell phone, connect to the \nLivera's wifi\n,\n\n\n\n\nssid:hicat_xxxxxx\npassward:88888888\n\n\n\n\nthen open \nchrome browser\n, go to the web page \n\n\nhttp://192.168.1.1/mmc/webapp/index.html\n\n\n\n\n\n\n\n\nSwitch the top video switcher to \nMJPG MODE\n, click \nLiveView\n, if the image flipped, you could change it within \nQUALITY,\n we suggest you to chose \n240p/15fps.\n\n\n\n\n\n\nClick \nROBOT\n to open the control panel, Try press forward button, if you see the robot \nspinning\n or \nmove back,\n you could adjust the wiring by switch the \nDC motor\n wire from the adapter.\n\n\n\n\n\n\nSoftware\n\n\nFirmware\n\n\nLivera frimware is basically embedded Linux shell script with some executable program, which works immediately while Livera power on, keeping all the functions like \nMJPG/H264 Server\n, \nBridge System\n, \nRest API\n works.\n\n\nAndroid\n\n\nWe've provided a custom android app for Livera, you could download it on our github page: \nhttps://github.com/hicat-tech/livera-android\n, the APP could help you liveview video, control robots, and access to livera's web app.\n\n\nDo not forget the turn the livera into \nRTSP(H264) Mode\n before open the liveview and robot function.\n\n\nAPP main page:\n\n\n\n\nRobot control panel:\n\n\n\n\nWeb app\n\n\n\n\nThe web app provides functions like Video recording, Live streaming, video download, wifi setting, visual tracking.\n\n\nRTSP/MJPG MODE SWITCH:\nOnce you open up the web app in your browser, the First thing to do is to select a video mode from \nRTSP\n to \nMJPG\n, after the selection you would immediately see some of UI changed according to different mode.\n\n\n\n\nWhat an amazing feature about livera is it could \nserve web pages\n as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on \nVUE.js\n, the app would work as Livera's command panel.\n\n\nTo use the web app you could go download the web app \nhere\n\n\nThe server also provide \nREST API\n which allows you to communicate with Livera through AJAX\n\n\n\n\n\nExample Code\n\n\nImage Capturing\n\n\n1. Image capture with Arduino Way\n\n\n\n    #include \"hicat.h\"\n\n    void setup()\n    {\n        hicat.begin();\n\n        char name[16] = \"0.jpg\";\n        for (int i = 0; i \n<\n 8; i++)\n        {\n            name[0] = '0' + i;\n            hicat.snapshot(name);\n\n            delay(10);\n        }\n    }\n\n    void loop()\n    {\n    }\n\n\n\n\n2. Image capture with WEB Way\n\n\nLivera's build in web server accept \nrest API\n, for detail description you could check out the \nWEB API\n guide. \n\n\nOne thing you have to Notice is that Livera has \ntwo image streming mode\n, which are \nMJPG\n for web and \nH264\n for more advance video streaming.\n\n\n\n\nFor Video Capturing:\n \n\n\n\n\n\n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in H264(RTSP) Mode\n    192.168.1.1/hicat/videoServer?mode=0\n\n    //Second step, start capture\n    192.168.1.1/hicat/record?save=1\n\n    //finally, stop\n    192.168.1.1/hicat/record?save=0\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n\n\n\n\n\n\n\n\nFor Image Capturing:\n \n\n\n\n\n\n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in MJPG Mode\n    192.168.1.1/hicat/videoServer?mode=1\n\n    //Second step, start capture image\n    //you could set up the image name xxx.jpg and stored direction '/www/mmc' is the SD card's directory\n    192.168.1.1/hicat/snapshot?name=xxx.jpg\ndir=/www/mmc/video/\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=1', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n\n\n\n\n\n\n3. Image capture with Linux(c/c++) Way\n\n\nWe've cross compile a tool call \ncurl\n which will help you to control Livera with the \nweb api\n\n\n\n    //telnet/serial/arduino into Livera's terminal\n    //type the command below to invoke the web api. for detailed info please check out the web api section within the API GUIDE\n\n    curl http://127.0.0.1/hicat/record?save=1 //trigger h.264 video capture\n\n\n\n\nRobot Kit\n\n\nWebsocket and bridge system:\n bridge is a \nwebsocket server\n that runs on the \nlinux core\n, help to accept websocket connections to Livera on\nport 7681\n and transfer the information to \nMCU(32u4)\n.\n\n\nWebsocket Example:\nwe've built a websocket bridge server to help to transport text message from front-end web client to Arduino.\n\n\n\n    //server on port 7681\n    var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n    ws = new WebSocket(WebSocketURL);\n\n    ws.onopen = function(event) {\n        console.log('ws connection opened:' + WebSocketURL);\n    }\n    ws.send(`msg`);\n    ws.close();\n\n\n\n\n\n\n    // hicat robot demo\n    // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand\n\n    #include \n\n#include \n\n\nint PWM1 = 10;   //control servo\nint PWM_CE = 11;  //servo enable\n\nint AIN1 = 4;  //control motor\nint AIN2 = 5;  //control motor\nint AIN3 = 6;  //control motor\nint AIN4 = 8;  //control motor\n\nint BIN3 = A2;  //control laser\nint BIN4 = A3;  //control laser\n\nServo myservo;\nSerialCommand sCmd;\n\nuint8_t camera_angle = 120;\nuint8_t camera_angle_range[] = {\n  60, 150\n};\nuint8_t laser_is_on = 0;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial1.begin(115200);\n  // initialize the digital pin as an output.\n  pinMode(AIN1, OUTPUT);\n  pinMode(AIN2, OUTPUT);\n  pinMode(AIN3, OUTPUT);\n  pinMode(AIN4, OUTPUT);\n  pinMode(BIN3, OUTPUT);\n  pinMode(BIN4, OUTPUT);\n  digitalWrite(BIN3, LOW);  // turn off LASER\n  digitalWrite(BIN4, LOW);\n\n  pinMode(PWM_CE, OUTPUT);\n  myservo.attach(PWM1);\n  digitalWrite(PWM_CE, HIGH);\n  myservo.write(camera_angle);\n  digitalWrite(PWM_CE, LOW); //disable servo\n\n\n  // Setup callbacks for SerialCommand commands\n  sCmd.addCommand(\"laser\", trigger_laser);          // trigger laser\n  sCmd.addCommand(\"camera\", adjust_camera);         //\n  sCmd.addCommand(\"motor\", set_motor);\n  sCmd.setDefaultHandler(unrecognized);      // Handler for command that isn't matched  (says \"What?\")\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n  sCmd.readSerial();\n}\n\nvoid trigger_laser()\n{\n  if (laser_is_on) {\n    digitalWrite(BIN3, LOW);  // turn off LASER\n    laser_is_on = 0;\n    Serial.println(\"laser off\");\n  }\n  else {\n    digitalWrite(BIN3, HIGH);  // turn on LASER\n    laser_is_on = 1;\n    Serial.println(\"laser on\");\n  }\n}\n\nvoid adjust_camera()\n{\n  char *param;\n\n  param = sCmd.next();\n  if (!strcmp(param, \"down\")) {\n    if (camera_angle \n<\n camera_angle_range[1]) {\n      camera_angle += 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n  else if (!strcmp(param, \"up\")) {\n    if (camera_angle > camera_angle_range[0]) {\n      camera_angle -= 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n\n  Serial.print(\"camera angle: \");\n  Serial.println(camera_angle);\n}\n\nvoid set_motor()\n{\n  char *param;\n  int16_t left = 0;\n  int16_t right = 0;\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  left = atoi(param);\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  right = atoi(param);\n\n  Serial.print(\"motor \");\n  Serial.print(left);\n  Serial.print(\" \");\n  Serial.println(right);\n\n\n  if (left > 30) {\n    analogWrite(AIN2, left);\n    digitalWrite(AIN1, LOW);\n  } else if (left \n<\n -30)  {\n    analogWrite(AIN2, 255 + left);\n    digitalWrite(AIN1, HIGH);\n  }\n  else {\n    digitalWrite(AIN1, LOW);\n    digitalWrite(AIN2, LOW);\n  }\n\n  if (right > 30) {\n    analogWrite(AIN3, right);\n    digitalWrite(AIN4, LOW);\n  }\n  else if (right \n<\n -30) {\n    analogWrite(AIN3, 255 + right);\n    digitalWrite(AIN4, HIGH);\n  }\n  else {\n    digitalWrite(AIN3, LOW);\n    digitalWrite(AIN4, LOW);\n  }\n\n}\n\n\n// This gets set as the default handler, and gets called when no other command matches.\nvoid unrecognized(const char *command) {\n  Serial.println(\"What?\");\n}\n\n\n\n\n\n\n\n\n\n\nAdvance\n\n\nAPI GUIDE\n\n\n1.WEB API\n\n\nThe Web API contains a set of REST API in order to interact with LIVERA in a convenient way through \nAJAX\n or \nURL\n. \n\n\nAJAX Example:\nthe below could be run in general font-end javascript client side.\n\n\n\n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }\n\n\n\n\n\nWebsocket and bridge system:\n bridge is a \nwebsocket server\n that runs on the \nlinux core\n, help to accept websocket connections to Livera on\nport 7681\n and transfer the information to \nMCU(32u4)\n.\n\n\nWebsocket Example:\nwe've built a websocket bridge server to help to transport text message from front-end web client to Arduino.\n\n\n\n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();\n\n\n\n\n1.\nSet up Video Streaming Mode:\n This API allows you to swith between \nRTSP\n and \nMJPEG\n streaming mode, be careful that \nVideo Record API\n only works under \nRTSP Mode\n, and \nScreen Shot API\n only works under \nMJEPG Mode\n.\n\n\n/hicat/videoServer?mode=0\n\n\n\n\nmode=0\n: RTSP Server Start\n\nmode=1\n: MJPEG Mode\n\n\n2.\nStation Mode\n: Let Livera link to local wifi router\n\n\n/hicat/stationMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages:\n\nsuccess\n: none return\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n3.\nWIFI Access Point\n: Make Livera to AP mode\n\n\n/hicat/apMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages(object):\n\nsuccess\n: none return\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n4.\nSet Livera time\n: Synchronous time with Livera, the time also affect to the default video name. \n\n\n/hicat/setTime?time=%d-%d-%d-%d-%d-%d\n\n\n\n\nExample\n: /hicat/setTime?time=2018-09-09-01-01-01\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n5.\nGet Video Download Links\n: This API will return a JASON format(\n{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}\n) message about all the file within \nvideo folder\n in SD Card. Once you get the fileName you could just go to this url \nhttp://192.168.1.1/mmc/video/xxxxx.264\n to download it(might figure your IP address under station mode).\n\n\n/hicat/files\n\n\n\n\nsuccess\n:{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}  \n\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n6.\nVideo Record\n: This API allows you to record and delete the video and auto save into the default \nvideo\n folder in SD card.\n\n\n/hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264\n\n\n\n\nsave=1\n: start recording\n\nsave=0\n: stop recording and save\n\ndel=xxxxxxxx.h264\n: delete file xxxxxxxx.h264\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n7.\nVideo Setting\n: Switch video angle, video resolution and video fps.\n\n\n/hicat/setCamera?resolve=1\nrotate=0\nfps=20\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n//only work under mjpg mode\n\n\n8.\nSnapshot\n: snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under \n/hicat/files\n API.\n\n\n/hicat/snapshot?name=xxx.jpg\ndir=/www/mmc/video/\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}    \n\n\n9.\nFor test\n: test api, do nothing but test.\n\n\n/hicat/test\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}   \n\n\n2.Embedded Linux API\n\n\nDetail information could be view under our github \nlibhicat\n, There are instructions guide you through development tools set up and workflow, please have a look.\n\n\n#ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \nC\n { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif\n\n\n\n\n3.Arduino Libray API\n\n\nThe Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in \ngithub\n\n\n#ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include \nArduino.h\n\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_\n\n\n\n\nHI3518EV100 SDK\n\n\nContent within SDK:\n\n\n\n\nlinux\n\n\nfile system \n\n\nHi3518E Documentation\nHardware design reference\n\n\ndownload address:\n \ndownload link\n  \nverifycode:\n \nkspc\n   \ndecode password:\n \nlk87612umzvcb01qqsalv\n\n\n\n\nHow to burn the firmware to flash\n\n\nyou must have a hicat board with a uboot already burned.\n\n\nthen connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]:\n\n\nloady 0x82000000\n\n\n\n\nthen send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/\n\n\nsf probe 0\nsf erase 0x100000 0x300000\nsf write 0x82000000 0x100000 0x300000    \nloady 0x82000000\n\n\n\n\nthen send the rootfs file to the board.\n\n\nsf erase 0x400000 0xC00000\nsf write 0x82000000 0x400000 0x500000\nsetenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)'\nsetenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'\nsaveenv\n\n\n\n\nthen reboot the board or execute 'reset' command.\n\n\nAbout rtspserver and libhisiv.a\n\n\nrtspserver have two demo:\n\n one is modified from live555 project. ( live555MediaServer )\n\n source code is in https://bitbucket.org/zhouhua/hicat_rtspserver\n* play Address: rtsp://192.168.1.1/hicat.264\n\n\nHow to install software pack\n\n\n\n\nexecute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where)\n\n\nformat the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS\n\n\nthen execute \nchmod +x hi_sd.sh \n ./hi_sd.sh\n, the board will reboot\n\n\n\n\nHow to upgrade\n\n1. Formating the SD card with vfat or fat32 mode.\n2. then copy the hicat2016xxxx.tar package to the SD card.\n3. press the reset button (RST_PBC)\n4. connect the power supply.\n5. wait for the board reset again.\n\n\nWhat's more\n\n \nzwebs\n https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git\n\n\nHow to use programming with serial port on Hisiv\n\n \nlibSerial\n https://github.com/9crk/libSerial.git\n\n\nLinux SDK Source Code\n can be view \nhere\n\n\nopenCV\n\n\nHow to use opencv Demo\n\n\n\n\nclone \nthis\n repo\n\n\nthen install the compiler\n\n\ncompile the apps under 'app' dir with \n./build.sh\n\n\ncopy the app dir to the board\n\n\ncopy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib\n\n\ncd app \n source env.sh\n\n\nexecute './capture'\n to capture an image named 'myImage.jpg'\n\n\nexecute './match model.jpg'\n to find the object model.jpg in the camera.\n\n\nthen you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/hi.jpg\n\n\n\n\nThe way To do \nblack-line tracking.\n\n\n1.check out the files.\n \n\n\n~/libhicat/app$ ls__\n\nbuild.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg\n\n\n\n\n2.copy capture.cpp as a demo\n\n\ncp capture.cpp lineTrack.cpp\n\n\n\n\n3.modify build.sh, add content below\n\n\narm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack\n\n\n\n\n4.compile\n\n\n./build.sh\n\n\n\n\n#include\nstdio.h\n\n#include\nstdlib.h\n\n#include\nunistd.h\n\n#include\nlibhisiv.h\n\nint main(int argc,char* argv[])\n{\n\nchar data[1280*720];\nint len;\nint i;\nlen = venc_getYUV(0,data);\n\n    int x,y;\n    int result[10];\nfor(i=0;i\n10;i++){\n    result[i] = 0;\n}\nfor(i=0;i\n10;i++){\n    for(y=635;y\n(635+10);y++){\n        for(x=i*72;x\n(i+1)*72;x++){\n            result[i]+=data[y*1280+x];\n        }\n    }\n    result[i] = result[i]/(72*10);\n}\nfor(i=0;i\n10;i++){\n    result[i] = 0;\n    printf(\nresult = %d\\n\n,result[i]);\n}\n}", 
            "title": "Document"
        }, 
        {
            "location": "/#quick-start-manual", 
            "text": "What is Livera   Welcome to start the new adventure with Hicat!! Happy hacks. :p  In a nutshell, Livera by Team HiCat is an open source hardware project which aims to bring machine vision features to the  Arduino  community. It is also a good platform for building  visual driven robotics.  We've provided libraries which contain  machine vision  related APIs such as:   720hd video and photo capturing processing  OpenCV enabled Color-Sensitive and Object-Tracking.  Wifi enabled wireless control (this can work with the iot!)   Image capturing and data recording onto the onboard sd card   Mobile observation and manipulation from our custom apps( web-based and native)  Programmable and open source.   what Livera could do:   Future development:  It is always exciting to think about the future, as for the buzz of AI recently, undeniably it is the future.  When we saw the article of How a  Japanese cucumber farmer is using deep learning to sort cucumbers.  we think Livera should be best machine vision front-end part for  image capturing and openCV pre-processing .  With the natural language virtual assistant and cloud deep learning platfrom, we could just teach the robot how to perform task by speaking, or let him learn by watching, that will be really awesome, like people could finally owns their own real world  R2D2  or  BB8 .  In conclusion:   Theme based advance  robotic kit .  More advance image capturing and processing capability  Natural language virtual assitant  Image streaming and processing  cloud     User Manual  Power:     LIVERA allows mulitpul ways of power supply   3.7V lipo battery (No higher voltage)  USB Port (MCU)  I/O port(VIN)   Hock Up Camera Module:     The Livera core package contains 3 main conponent, 1. Livera Board 2. Camera Module 3. Extendable Cable.  There are  white symbols  on top of every module, always remember to match the symbol while plugs the Camera module.   You could choose to directly plug in the Camera Module on to Livera Board, or use extendable cable to extend the Camera Module in order to build something like pan-tilt enabled Robot.   Connect to Livera(access point):     Power up Livera, give a few second to boot, the WIFI access point hostname  hicat_xxxxxx  should show up on your PC/MOBILE's wifi list. The default wifi password is:  88888888    Once you connected to the wifi, you could try out the host API web page by IP address: 192.168.1.1  You could let Livera access to your local wifi(station mode) by the API web   192.168.1.1  or web app  192.168.1.1/mmc/webapp/index.html (the address /www/mmc/  is the directory of mounted sd card address within Livera Linux, which also means you could build your own web application and copy it to the sd card, Livera will automaticly host it for you)  You could also change Livera's wifi name through  linux command line tool : Once you connected to LIVERA, you could Telnet into the Linux system within Livera, follow the section  Access into Linux(3518E)  below, within the  /hicat/  folder you should find the  launch.sh  tool, run the program  ./launch.sh ap SSID password , or through web app.  Station WIFI Mode:     you could let Livera connected to your  local wifi hotspot  through the web API, btw we have provide a program call  'imhere'  to let your got the new IP address of Livera.  web app:  192.168.1.1/mmc/webapp/index.html (this web app should placed in the  sd card , could be download on  https://github.com/hicat-tech/webapp ) offers station method.  Test Video Feature:     LIVERA has two video streaming mode  RTSP/MJPEG , RTSP stands for advence  H.264 codec raw video streaming  which works well with our Android app or any video Players which accepted RTSP streaming protocol(suggest to use VLC player) with this IP: rtsp://192.168.1.1/hicat.264 .   MJPEG  would be a  WEB friendly  video format. Once you successfully boot up Livera and connected the WIFI, you can go to the web API page  192.168.1.1  to test the board's functions with your web browser, btw Chrome would be the best choice.  Go to web API page:  192.168.1.1 , hit the link: MJPEG Mode, you could view the live video stream via the link:  http://192.168.1.1:8080 , suggest use chrome browser to visit, also you could  change the video resolution  by press the links, this resolution you choose would work for  both RTSP and MJPG Mode .  If you using the webapp, the custom web app which stay in the sd card and would show up here: 192.168.1.1/mmc/webapp/index.html . Choose the  MJPG MODE  from the webapp's top right switch button, and hit the  LiveView  button to get Live MJPG video stream from Livera.   Access into Linux(3518E):  Livera accept  telnet  connections, when you connected to Livera through WIFI, you could open up your terminal, type:  telnet 192.168.1.1       //if you let the board connected to the router you should find the correct IP address\n\n//User:root\n//passward:(hit return directly)\n\ncd /hicat/   //firmware directory\n./launch.sh   //Main script for main operation: video setting/mount sd card\n\ncd /www/mmc  //SD card directory  beside the internet ways, you could also go  serial communication  through the given  UART  port on Livera.   Reset Livera:      wifi reset:  hold the reset buttom  RST-PBC , you would see the led light  STAT  flashing per second, count for  3 seconds   ps: very careful to not let it flash more than 10 seconds,  once you see the led flash faster, the wifi  hicat_xxxxxx  would comes up in your wifi list.    factory reset:  make sure there is a folder named  hicat_failsafe.tar , if so, hold the reset buttom  RST-PBC , you would see the led light  STAT  flashing per second, count for  10 seconds , once you see the led flash faster, you would get a brand new Livera.    SD Card:  Caution:  if you have the  SD card which comes with the Kits , the needed file has already been  installed , the below instruction shows how to set up a  new card .  mount sd card:  any new sd card with format(vfat fat32) would be auto mounted. if not, stick it into the sd card slot and follow the steps below.   goto   follow the above step access into Linux(3518E) to telnet into Livera(simular like ssh)   goto the address    `cd /hicat/`    within the  hicat  directory you should find the command line tool named  launsh.sh    then go    ./launch.sh sd\n\n//you should see 4 options `format|mount|umount|hicatEx`, `format` means format the sd card into `fat32` file system which works like this command below:\n\n ./launch.sh sd format  mount umount would let you mount the sd card to  /www/mmc  directory, hicatEx would helps you to depackage the  hicatEx.tar  (put it into sd card before you go  hicatEx ) which contains some important programs for Livera's system. \n- do  format  first(format the sd card into fat32 in your pc/mac would be okay), then go  mount , finally  hicatEx .\n- once you finished format and mount the sd card there will be you could chose to put the    OpenCV lib  into  opencv  folder incase for opencv demo.  Android APP:  APP main page:   We've provided a custom android app for Livera, you could download it on our github page:  https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app.  Do not forget the turn the livera into  RTSP(H264) Mode  before live viewing the video or access into robot control.  Web app:   The web app provides functions like Video recording, Live streaming, Livera setting,   What an amazing feature about livera is that it could  serve web pages  as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on  VUE.js , the app would work as Livera's command panel.  To use the web app you could go download the web app  here:https://github.com/hicat-tech/webapp  The web server within Livera also provide  REST API  which allows you to communicate with Livera through AJAX, have a look at detailed description within  API GUIDE .", 
            "title": "Quick Start Manual"
        }, 
        {
            "location": "/#hardware", 
            "text": "", 
            "title": "Hardware"
        }, 
        {
            "location": "/#livera", 
            "text": "Livera's given I/O port has connected into  MCU(Atmel 32u4) , and the pin layout is pretty much likely to  Arduino Mini , you could program it with arduino IDE through the given  USB port , select the board to  arduino leonardo .   We've also placed a mpu6050 6-axie accelerometer on Livera, this would help in case of self-balance vehicle, there is 3 I/O port been connected MCU(32u4), there are I2C(D2:SDA,D3:SCL) and interrupt(D7)  Livera Hardware Architecture:   Arduino(MCU) I/O Pin Indicate:", 
            "title": "Livera"
        }, 
        {
            "location": "/#motor-driver", 
            "text": "Port Indicator:   Motor Driver -  Hicat.Livera   Motor Port 1(M1):   M1-1 -  A5 ,  M1-2 -  A4 .  Motor Port 2(M2):   M2-1 -  A3 ,  M2-2 -  A2 .  Motor Port 3(M3):   M3-1 -  D8 ,  M3-2 -  D6 .   Motor Port 4(M4):   M4-1 -  D5 ,  M4-2 -  D4 .    Servo Motor Port:   11 -  D11, 10 -  D10, 9 -  D9, 13 -  D13    The Livera Motor Driver was designed specially for Livera, so that you can directly plug onto Livera, in this way you would get almost everything you need for a  robotic system .  Livera Motor Driver can power up  4 DC motors  and  3 Servo Motors , with external power input.", 
            "title": "Motor Driver"
        }, 
        {
            "location": "/#the-robot-kit-assembly-guide", 
            "text": "Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of  physical building and wiring,  it might take around  25 minutes  to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.  Parts list    The Livera Robot kit comes with following parts:   Boards:  HICAT.Livera Boardx1 Livera Motor Driver Boardx1  Camera:  Livera Camera Extend Cablex1 Livera Camera Modulex1  Storage: 2G SD Card with firmware built in  Guidebook:  Livera GuideBookx1 Livera Robot Assembly GuideBookx1  Power:  9V Lipo Battery and Bat Carrier  Motor:  E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2  Structure bits:  Robot Base Acrylic Panels set, Omni-directional Wheel Set   Screws:  M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4   OUTPUT:  LASER Beanx1  Accessories:  Stickersx1, USB Cablex1, Screwdriver(+,-)x1   Video Tutorial \nWe've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:   Pyhsical Assembly  Webapp Guide   \n       Step 1: Base panel build   Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.   Robot Base Acrylic Panel x1  DC Motor + Motor Carrier x2  Omni-directional Wheel Set x1  M2x15(+6)mm Nylon Stud x4  M2x6mm Nylon Stud x4  M2x6(+6)mm Nylon Stud x4  M2 Nylon Nut x4   Notice:  All the Stud could be install by hand, doesn't require and tools. Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.    Assemble up the  Omni-direction Wheel Set  like the picture shows, then close up with the  Cover bit , waiting for screw on the  Base Panel.       Install the motor on base panel:  carefully place the  M2 Nut  onto the  Motor Carrier's slot , than catch the  DC Motor  and match to the hole on the  Base Panle , notice to keep the  +  sign on top as the left top of the pic shows, using  M2x6(+6) Stud  to screw through from the other side of the panel.  Install the Structure bit:  place the  M2x15(+6) Stud  on top of the  Base panel , then let the  6mm screw bit  through the hole and screw into the  M2x6mm Stud.   Step 2: Body build    Install the Livera Motor Driver:  simply place by matching to the  Stud.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.     Install HICAT.Livera with Extend Cable:  carefully stack  Livera  on top of  Livera Motor Driver,  do check for the  I/O ports  and the  outline  to see weather it is matched to the  Livera Motor Driver.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top of Livera.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.  Step 3: Top build    Install the top Acrylic Panel:  place the  Top Acrylic Panel , fix the panle by screw the  M2x6(+6)mm Stud  on top.  Stick the Power case and Servo:  unpack the  3M Sticker,  stick the conponents as the image shows.  Connect Power:  connect the 2.54mm Power connector from  Power case  to  Livera Motor Driver.     Install the Camera pan-tilt:  screw the Servo Arm Set form the  EMAX Servo set  on the  Camera Pan-tilt.  Install Camera Module:  carefully place the camera module on the  Acrylic Camera Pan-tilt , using  M2 Rivet  to fix it.  Install Camera Extend Cable and Laser Bean:  install the conponents as the picture shows, notice that the  direction  of the camera module should be  match together  according to the  indicate drawings.   Step 4: Wiring    Wiring:  wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the  DC Motor  wring, you would need to use the screwdriver to fix the wire into the adapter.  Install SD card:  put the  SD card  into the SD slot.     Install Battery:  put the  9v chargable battery  into the  Power Case.  Power up to init the Servo:  switch on the  Power Switch  From the Motor Driver, wait until heard  two movement  from the  Servo,  then put the  Camera Pan-tilt  on the  Servo  in a  horizon direction,  screw it up using the smallest screw from the Servo Box.  Enjoy:  pick up you cell phone, connect to the  Livera's wifi ,   ssid:hicat_xxxxxx\npassward:88888888  then open  chrome browser , go to the web page   http://192.168.1.1/mmc/webapp/index.html    Switch the top video switcher to  MJPG MODE , click  LiveView , if the image flipped, you could change it within  QUALITY,  we suggest you to chose  240p/15fps.    Click  ROBOT  to open the control panel, Try press forward button, if you see the robot  spinning  or  move back,  you could adjust the wiring by switch the  DC motor  wire from the adapter.", 
            "title": "The Robot kit Assembly Guide"
        }, 
        {
            "location": "/#software", 
            "text": "", 
            "title": "Software"
        }, 
        {
            "location": "/#firmware", 
            "text": "Livera frimware is basically embedded Linux shell script with some executable program, which works immediately while Livera power on, keeping all the functions like  MJPG/H264 Server ,  Bridge System ,  Rest API  works.", 
            "title": "Firmware"
        }, 
        {
            "location": "/#android", 
            "text": "We've provided a custom android app for Livera, you could download it on our github page:  https://github.com/hicat-tech/livera-android , the APP could help you liveview video, control robots, and access to livera's web app.  Do not forget the turn the livera into  RTSP(H264) Mode  before open the liveview and robot function.  APP main page:   Robot control panel:", 
            "title": "Android"
        }, 
        {
            "location": "/#web-app", 
            "text": "The web app provides functions like Video recording, Live streaming, video download, wifi setting, visual tracking.  RTSP/MJPG MODE SWITCH: Once you open up the web app in your browser, the First thing to do is to select a video mode from  RTSP  to  MJPG , after the selection you would immediately see some of UI changed according to different mode.   What an amazing feature about livera is it could  serve web pages  as web app thanks to the file streaming server, in Livera's demo, we've provided a single page web app which based on  VUE.js , the app would work as Livera's command panel.  To use the web app you could go download the web app  here  The server also provide  REST API  which allows you to communicate with Livera through AJAX", 
            "title": "Web app"
        }, 
        {
            "location": "/#example-code", 
            "text": "", 
            "title": "Example Code"
        }, 
        {
            "location": "/#image-capturing", 
            "text": "1. Image capture with Arduino Way  \n    #include \"hicat.h\"\n\n    void setup()\n    {\n        hicat.begin();\n\n        char name[16] = \"0.jpg\";\n        for (int i = 0; i  <  8; i++)\n        {\n            name[0] = '0' + i;\n            hicat.snapshot(name);\n\n            delay(10);\n        }\n    }\n\n    void loop()\n    {\n    }  2. Image capture with WEB Way  Livera's build in web server accept  rest API , for detail description you could check out the  WEB API  guide.   One thing you have to Notice is that Livera has  two image streming mode , which are  MJPG  for web and  H264  for more advance video streaming.   For Video Capturing:     \n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in H264(RTSP) Mode\n    192.168.1.1/hicat/videoServer?mode=0\n\n    //Second step, start capture\n    192.168.1.1/hicat/record?save=1\n\n    //finally, stop\n    192.168.1.1/hicat/record?save=0\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()   For Image Capturing:     \n    //type the url directly within browser\n    //IP address could be different if you use station mode.\n\n    //first step, make sure you are in MJPG Mode\n    192.168.1.1/hicat/videoServer?mode=1\n\n    //Second step, start capture image\n    //you could set up the image name xxx.jpg and stored direction '/www/mmc' is the SD card's directory\n    192.168.1.1/hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/\n\n    //AJAX is also avaliable, here is example with client side javascript\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=1', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()  3. Image capture with Linux(c/c++) Way  We've cross compile a tool call  curl  which will help you to control Livera with the  web api  \n    //telnet/serial/arduino into Livera's terminal\n    //type the command below to invoke the web api. for detailed info please check out the web api section within the API GUIDE\n\n    curl http://127.0.0.1/hicat/record?save=1 //trigger h.264 video capture", 
            "title": "Image Capturing"
        }, 
        {
            "location": "/#robot-kit", 
            "text": "Websocket and bridge system:  bridge is a  websocket server  that runs on the  linux core , help to accept websocket connections to Livera on port 7681  and transfer the information to  MCU(32u4) .  Websocket Example: we've built a websocket bridge server to help to transport text message from front-end web client to Arduino.  \n    //server on port 7681\n    var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n    ws = new WebSocket(WebSocketURL);\n\n    ws.onopen = function(event) {\n        console.log('ws connection opened:' + WebSocketURL);\n    }\n    ws.send(`msg`);\n    ws.close();  \n\n    // hicat robot demo\n    // get SerialCommand library from https://github.com/hicat-tech/Arduino-SerialCommand\n\n    #include  \n#include  \n\nint PWM1 = 10;   //control servo\nint PWM_CE = 11;  //servo enable\n\nint AIN1 = 4;  //control motor\nint AIN2 = 5;  //control motor\nint AIN3 = 6;  //control motor\nint AIN4 = 8;  //control motor\n\nint BIN3 = A2;  //control laser\nint BIN4 = A3;  //control laser\n\nServo myservo;\nSerialCommand sCmd;\n\nuint8_t camera_angle = 120;\nuint8_t camera_angle_range[] = {\n  60, 150\n};\nuint8_t laser_is_on = 0;\n\nvoid setup() {\n  Serial.begin(115200);\n  Serial1.begin(115200);\n  // initialize the digital pin as an output.\n  pinMode(AIN1, OUTPUT);\n  pinMode(AIN2, OUTPUT);\n  pinMode(AIN3, OUTPUT);\n  pinMode(AIN4, OUTPUT);\n  pinMode(BIN3, OUTPUT);\n  pinMode(BIN4, OUTPUT);\n  digitalWrite(BIN3, LOW);  // turn off LASER\n  digitalWrite(BIN4, LOW);\n\n  pinMode(PWM_CE, OUTPUT);\n  myservo.attach(PWM1);\n  digitalWrite(PWM_CE, HIGH);\n  myservo.write(camera_angle);\n  digitalWrite(PWM_CE, LOW); //disable servo\n\n\n  // Setup callbacks for SerialCommand commands\n  sCmd.addCommand(\"laser\", trigger_laser);          // trigger laser\n  sCmd.addCommand(\"camera\", adjust_camera);         //\n  sCmd.addCommand(\"motor\", set_motor);\n  sCmd.setDefaultHandler(unrecognized);      // Handler for command that isn't matched  (says \"What?\")\n}\n\n// the loop routine runs over and over again forever:\nvoid loop() {\n  sCmd.readSerial();\n}\n\nvoid trigger_laser()\n{\n  if (laser_is_on) {\n    digitalWrite(BIN3, LOW);  // turn off LASER\n    laser_is_on = 0;\n    Serial.println(\"laser off\");\n  }\n  else {\n    digitalWrite(BIN3, HIGH);  // turn on LASER\n    laser_is_on = 1;\n    Serial.println(\"laser on\");\n  }\n}\n\nvoid adjust_camera()\n{\n  char *param;\n\n  param = sCmd.next();\n  if (!strcmp(param, \"down\")) {\n    if (camera_angle  <  camera_angle_range[1]) {\n      camera_angle += 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n  else if (!strcmp(param, \"up\")) {\n    if (camera_angle > camera_angle_range[0]) {\n      camera_angle -= 10;\n\n      digitalWrite(PWM_CE, HIGH);\n      myservo.write(camera_angle);\n      digitalWrite(PWM_CE, HIGH);\n    }\n  }\n\n  Serial.print(\"camera angle: \");\n  Serial.println(camera_angle);\n}\n\nvoid set_motor()\n{\n  char *param;\n  int16_t left = 0;\n  int16_t right = 0;\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  left = atoi(param);\n\n  param = sCmd.next();\n  if (param == NULL) {\n    return;\n  }\n  right = atoi(param);\n\n  Serial.print(\"motor \");\n  Serial.print(left);\n  Serial.print(\" \");\n  Serial.println(right);\n\n\n  if (left > 30) {\n    analogWrite(AIN2, left);\n    digitalWrite(AIN1, LOW);\n  } else if (left  <  -30)  {\n    analogWrite(AIN2, 255 + left);\n    digitalWrite(AIN1, HIGH);\n  }\n  else {\n    digitalWrite(AIN1, LOW);\n    digitalWrite(AIN2, LOW);\n  }\n\n  if (right > 30) {\n    analogWrite(AIN3, right);\n    digitalWrite(AIN4, LOW);\n  }\n  else if (right  <  -30) {\n    analogWrite(AIN3, 255 + right);\n    digitalWrite(AIN4, HIGH);\n  }\n  else {\n    digitalWrite(AIN3, LOW);\n    digitalWrite(AIN4, LOW);\n  }\n\n}\n\n\n// This gets set as the default handler, and gets called when no other command matches.\nvoid unrecognized(const char *command) {\n  Serial.println(\"What?\");\n}", 
            "title": "Robot Kit"
        }, 
        {
            "location": "/#advance", 
            "text": "", 
            "title": "Advance"
        }, 
        {
            "location": "/#api-guide", 
            "text": "1.WEB API  The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through  AJAX  or  URL .   AJAX Example: the below could be run in general font-end javascript client side.  \n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }  Websocket and bridge system:  bridge is a  websocket server  that runs on the  linux core , help to accept websocket connections to Livera on port 7681  and transfer the information to  MCU(32u4) .  Websocket Example: we've built a websocket bridge server to help to transport text message from front-end web client to Arduino.  \n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();  1. Set up Video Streaming Mode:  This API allows you to swith between  RTSP  and  MJPEG  streaming mode, be careful that  Video Record API  only works under  RTSP Mode , and  Screen Shot API  only works under  MJEPG Mode .  /hicat/videoServer?mode=0  mode=0 : RTSP Server Start mode=1 : MJPEG Mode  2. Station Mode : Let Livera link to local wifi router  /hicat/stationMode?ssid=xxxxx password=xxxxxxx  return messages: success : none return error :{\"result\":\"ERROR\"}  3. WIFI Access Point : Make Livera to AP mode  /hicat/apMode?ssid=xxxxx password=xxxxxxx  return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"}  4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name.   /hicat/setTime?time=%d-%d-%d-%d-%d-%d  Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within  video folder  in SD Card. Once you get the fileName you could just go to this url  http://192.168.1.1/mmc/video/xxxxx.264  to download it(might figure your IP address under station mode).  /hicat/files  success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}    error :{\"result\":\"ERROR\"}  6. Video Record : This API allows you to record and delete the video and auto save into the default  video  folder in SD card.  /hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264  save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete file xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  7. Video Setting : Switch video angle, video resolution and video fps.  /hicat/setCamera?resolve=1 rotate=0 fps=20  success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  //only work under mjpg mode  8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under  /hicat/files  API.  /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/  success \uff1a{\"result\":\"OK\"}      9. For test : test api, do nothing but test.  /hicat/test  success \uff1a{\"result\":\"OK\"}     2.Embedded Linux API  Detail information could be view under our github  libhicat , There are instructions guide you through development tools set up and workflow, please have a look.  #ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern  C  { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif  3.Arduino Libray API  The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in  github  #ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include  Arduino.h \n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_", 
            "title": "API GUIDE"
        }, 
        {
            "location": "/#hi3518ev100-sdk", 
            "text": "Content within SDK:   linux  file system   Hi3518E Documentation Hardware design reference  download address:   download link    verifycode:   kspc     decode password:   lk87612umzvcb01qqsalv   How to burn the firmware to flash  you must have a hicat board with a uboot already burned.  then connect the UART0 on the ARM9 Hisiv chip. and then use the command as below[recomendly using Hyper Terminal to finish this]:  loady 0x82000000  then send file on Hyper Terminal with xmodern protocal. choose the uImage file under https://github.com/9crk/libhisiv/opt/  sf probe 0\nsf erase 0x100000 0x300000\nsf write 0x82000000 0x100000 0x300000    \nloady 0x82000000  then send the rootfs file to the board.  sf erase 0x400000 0xC00000\nsf write 0x82000000 0x400000 0x500000\nsetenv bootargs 'mem=32M console=ttyAMA0,115200 root=/dev/mtdblock2 rootfstype=jffs2 mtdparts=hi_sfc:1M(boot),3M(kernel),12M(rootfs)'\nsetenv bootcmd 'sf probe 0;sf read 0x82000000 0x100000 0x300000;bootm 0x82000000'\nsaveenv  then reboot the board or execute 'reset' command.  About rtspserver and libhisiv.a  rtspserver have two demo:  one is modified from live555 project. ( live555MediaServer )  source code is in https://bitbucket.org/zhouhua/hicat_rtspserver\n* play Address: rtsp://192.168.1.1/hicat.264  How to install software pack   execute 'lrz' command to send libhicat/opt/hi_sd.sh into the board (any where)  format the sd card with fat32 format in default param. or use mkfs.vfat on Linux OS  then execute  chmod +x hi_sd.sh   ./hi_sd.sh , the board will reboot   How to upgrade \n1. Formating the SD card with vfat or fat32 mode.\n2. then copy the hicat2016xxxx.tar package to the SD card.\n3. press the reset button (RST_PBC)\n4. connect the power supply.\n5. wait for the board reset again.  What's more \n  zwebs  https://9crk@bitbucket.org/zhouhua/hicat_zwebs.git  How to use programming with serial port on Hisiv \n  libSerial  https://github.com/9crk/libSerial.git  Linux SDK Source Code  can be view  here", 
            "title": "HI3518EV100 SDK"
        }, 
        {
            "location": "/#opencv", 
            "text": "How to use opencv Demo   clone  this  repo  then install the compiler  compile the apps under 'app' dir with  ./build.sh  copy the app dir to the board  copy the opt/opencvlib dir to the board at /www/mmc/opencv/opencvlib  cd app   source env.sh  execute './capture'  to capture an image named 'myImage.jpg'  execute './match model.jpg'  to find the object model.jpg in the camera.  then you can browser the result hi.jpg on http://192.168.1.1/mmc/opencv/hi.jpg   The way To do  black-line tracking.  1.check out the files.    ~/libhicat/app$ ls__\n\nbuild.sh capture.cpp hi.html match model2.jpg myImage.jpg capture env.sh hi.jpg match.cpp model.jpg  2.copy capture.cpp as a demo  cp capture.cpp lineTrack.cpp  3.modify build.sh, add content below  arm-hisiv100nptl-linux-g++ lineTrack.cpp ../lib/libhisiv.a -I../include -lpthread -lm -o lineTrack  4.compile  ./build.sh  #include stdio.h \n#include stdlib.h \n#include unistd.h \n#include libhisiv.h \nint main(int argc,char* argv[])\n{\n\nchar data[1280*720];\nint len;\nint i;\nlen = venc_getYUV(0,data);\n\n    int x,y;\n    int result[10];\nfor(i=0;i 10;i++){\n    result[i] = 0;\n}\nfor(i=0;i 10;i++){\n    for(y=635;y (635+10);y++){\n        for(x=i*72;x (i+1)*72;x++){\n            result[i]+=data[y*1280+x];\n        }\n    }\n    result[i] = result[i]/(72*10);\n}\nfor(i=0;i 10;i++){\n    result[i] = 0;\n    printf( result = %d\\n ,result[i]);\n}\n}", 
            "title": "openCV"
        }, 
        {
            "location": "/api/", 
            "text": "API GUIDE\n\n\n1.WEB API\n\n\nThe Web API contains a set of REST API in order to interact with LIVERA in a convenient way through \nAJAX\n or \nURL\n. \n\n\nAJAX Example:\nthe below could be run in general font-end javascript client side.\n\n\n\n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }\n\n\n\n\n\nWebsocket and bridge system:\n bridge is a \nwebsocket server\n that runs on the \nlinux core\n, help to accept websocket connections to Livera on\nport 7681\n and transfer the information to \nMCU(32u4)\n.\n\n\nWebsocket Example:\nwe've built a websocket bridge server to help to transport text message from front-end web client to Arduino.\n\n\n\n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();\n\n\n\n\n1.\nSet up Video Streaming Mode:\n This API allows you to swith between \nRTSP\n and \nMJPEG\n streaming mode, be careful that \nVideo Record API\n only works under \nRTSP Mode\n, and \nScreen Shot API\n only works under \nMJEPG Mode\n.\n\n\n/hicat/videoServer?mode=0\n\n\n\n\nmode=0\n: RTSP Server Start\n\nmode=1\n: MJPEG Mode\n\n\n2.\nStation Mode\n: Let Livera link to local wifi router\n\n\n/hicat/stationMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages:\n\nsuccess\n: none return\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n3.\nWIFI Access Point\n: Make Livera to AP mode\n\n\n/hicat/apMode?ssid=xxxxx\npassword=xxxxxxx\n\n\n\n\nreturn messages(object):\n\nsuccess\n: none return\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n4.\nSet Livera time\n: Synchronous time with Livera, the time also affect to the default video name. \n\n\n/hicat/setTime?time=%d-%d-%d-%d-%d-%d\n\n\n\n\nExample\n: /hicat/setTime?time=2018-09-09-01-01-01\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n5.\nGet Video Download Links\n: This API will return a JASON format(\n{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}\n) message about all the file within \nvideo folder\n in SD Card. Once you get the fileName you could just go to this url \nhttp://192.168.1.1/mmc/video/xxxxx.264\n to download it(might figure your IP address under station mode).\n\n\n/hicat/files\n\n\n\n\nsuccess\n:{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}  \n\n\nerror\n:{\"result\":\"ERROR\"}\n\n\n6.\nVideo Record\n: This API allows you to record and delete the video and auto save into the default \nvideo\n folder in SD card.\n\n\n/hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264\n\n\n\n\nsave=1\n: start recording\n\nsave=0\n: stop recording and save\n\ndel=xxxxxxxx.h264\n: delete xxxxxxxx.h264\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n7.\nVideo Setting\n: Switch video angle, video resolution and video fps.\n\n\n/hicat/setCamera?resolve=1\nrotate=0\nfps=20\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}  \n\n\nerror\n\uff1a{\"result\":\"ERROR\"}\n\n\n//only work under mjpg mode\n\n\n8.\nSnapshot\n: snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under \n/hicat/files\n API.\n\n\n/hicat/snapshot?name=xxx.jpg\ndir=/www/mmc/video/\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}    \n\n\n9.\nFor test\n: test api, do nothing but test.\n\n\n/hicat/test\n\n\n\n\nsuccess\n\uff1a{\"result\":\"OK\"}   \n\n\n2.Embedded Linux API\n\n\nDetail information could be view under our github \nlibhicat\n, There are instructions guide you through development tools set up and workflow, please have a look.\n\n\n#ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern \nC\n { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif\n\n\n\n\n3.Arduino Libray API\n\n\nThe Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in \ngithub\n\n\n#ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include \nArduino.h\n\n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_", 
            "title": "API Guide"
        }, 
        {
            "location": "/api/#api-guide", 
            "text": "", 
            "title": "API GUIDE"
        }, 
        {
            "location": "/api/#1web-api", 
            "text": "The Web API contains a set of REST API in order to interact with LIVERA in a convenient way through  AJAX  or  URL .   AJAX Example: the below could be run in general font-end javascript client side.  \n\n    var xhr = new XMLHttpRequest(){\n          xhr.open('GET', '/hicat/videoServer?mode=0', true)\n          xhr.onload = function() {\n            answer = JSON.parse(xhr.responseText)\n            console.log(answer1)            \n         }\n        xhr.send()\n    }  Websocket and bridge system:  bridge is a  websocket server  that runs on the  linux core , help to accept websocket connections to Livera on port 7681  and transfer the information to  MCU(32u4) .  Websocket Example: we've built a websocket bridge server to help to transport text message from front-end web client to Arduino.  \n                //server on port 7681\n                var WebSocketURL = 'ws://' + window.location.hostname + ':7681'\n\n                ws = new WebSocket(WebSocketURL);\n\n                ws.onopen = function(event) {\n                    console.log('ws connection opened:' + WebSocketURL);\n                }\n                ws.send(`msg`);\n                ws.close();  1. Set up Video Streaming Mode:  This API allows you to swith between  RTSP  and  MJPEG  streaming mode, be careful that  Video Record API  only works under  RTSP Mode , and  Screen Shot API  only works under  MJEPG Mode .  /hicat/videoServer?mode=0  mode=0 : RTSP Server Start mode=1 : MJPEG Mode  2. Station Mode : Let Livera link to local wifi router  /hicat/stationMode?ssid=xxxxx password=xxxxxxx  return messages: success : none return error :{\"result\":\"ERROR\"}  3. WIFI Access Point : Make Livera to AP mode  /hicat/apMode?ssid=xxxxx password=xxxxxxx  return messages(object): success : none return error \uff1a{\"result\":\"ERROR\"}  4. Set Livera time : Synchronous time with Livera, the time also affect to the default video name.   /hicat/setTime?time=%d-%d-%d-%d-%d-%d  Example : /hicat/setTime?time=2018-09-09-01-01-01 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  5. Get Video Download Links : This API will return a JASON format( {\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]} ) message about all the file within  video folder  in SD Card. Once you get the fileName you could just go to this url  http://192.168.1.1/mmc/video/xxxxx.264  to download it(might figure your IP address under station mode).  /hicat/files  success :{\"result\":\"OK\",\"files\":[\"name\":\"xxxxx\",\"name\":\"xxxxx\"]}    error :{\"result\":\"ERROR\"}  6. Video Record : This API allows you to record and delete the video and auto save into the default  video  folder in SD card.  /hicat/record?save=1\n/hicat/record?del=xxxxxxxx.h264  save=1 : start recording save=0 : stop recording and save del=xxxxxxxx.h264 : delete xxxxxxxx.h264 success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  7. Video Setting : Switch video angle, video resolution and video fps.  /hicat/setCamera?resolve=1 rotate=0 fps=20  success \uff1a{\"result\":\"OK\"}    error \uff1a{\"result\":\"ERROR\"}  //only work under mjpg mode  8. Snapshot : snap shot form one of the frame form MJPEG stream. We suggest to make the direction to /www/mmc/video/ coz the photo info could be receive under  /hicat/files  API.  /hicat/snapshot?name=xxx.jpg dir=/www/mmc/video/  success \uff1a{\"result\":\"OK\"}      9. For test : test api, do nothing but test.  /hicat/test  success \uff1a{\"result\":\"OK\"}", 
            "title": "1.WEB API"
        }, 
        {
            "location": "/api/#2embedded-linux-api", 
            "text": "Detail information could be view under our github  libhicat , There are instructions guide you through development tools set up and workflow, please have a look.  #ifndef _LIBHISIV_H_\n#define _LIBHISIV_H_\n\n#ifdef __cplusplus \nextern  C  { \n#endif\nint venc_exit(int n);\nint venc_init(int resolve);//0:720P 1:QVGA(320*240) 2:VGA(640*480)\nint venc_init_more(int resolve,int mode,int fps);//resolve: 0/1/2  1280*720/320*240/640*480  mode: 0/1 H264/MJPEG\nint venc_requestIDR();//request IDR frame\nint venc_getFrame(char* buffer,int *datalen,int *pts,int *type);\nint venc_snap(char* buff,int xRes,int yRes);\nint venc_getYUV(int mode,char*buff);//mode=0 Y  mode=1 UV mode = 3 YUV420(SP)\nint venc_rotate(int dir);\n\n//for audio\nextern int aenc_init(int mode);// 0/1 PT_LPCM/AAC/\nextern int aenc_getFrame(char* buff);\nextern int aenc_exit();\n//jpeg to http\nextern int libyuvdist_startYuvDistService(int port);\nextern int libyuvdist_updateYuv(int iHandle,char* data,int len,int seq,unsigned long timeStamp);\nextern int libyuvdist_stopYuvDistService(int iHandle);\nextern int libyuvdist_setSettingCallback(int iHandle,int func);//int func(int resX,int resY,int fps)\n\n#ifdef __cplusplus \n}\n#endif\n#endif", 
            "title": "2.Embedded Linux API"
        }, 
        {
            "location": "/api/#3arduino-libray-api", 
            "text": "The Arduino library wraps the web api, using serial communication and curl to communicate and send command to the video core(HI3518E). There are also example codes could be find in  github  #ifndef _HICAT_H_\n#define _HICAT_H_\n\n#include  Arduino.h \n\nclass HiCat\n{\npublic:\n    HiCat();\n    int begin(void);\n\n    /**\n     * Take a picture\n     *\n     * @param file_name     picture name\n     * @return 0 - OK, otherwise - error code\n     */\n    int snapshot(const char *file_name);\n\n    /**\n     * Start to record a video which is saved at /www/mmc/video/\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int record();\n\n    /**\n     * Stop to record a video\n     *\n     * @return 0 - OK, otherwise - error code\n     */\n    int stop_recording();\n\n    /**\n     * Set camera format\n     *\n     * @param resolution    0 - 1280*720, 2 - 640*480, 1 - 320*240\n     * @param rotation      0 - no rotation, 1 - 180 degree rotation\n     * @param fps           frame per secord from 1 to 25\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_camera(int resolution, int rotation, int fps);\n\n    /**\n     * Set Wi-Fi mode\n     *\n     * @param mode  0 - AP mode, 1 - Station mode\n     * @param ssid  SSID\n     * @param password  password\n     * @return 0 - OK, otherwise - error code\n     */\n    int set_wifi(int mode, const char *ssid, const char *password);\n\n    /**\n     * Run a shell command\n     *\n     * @param command   shell command\n     * @return 0 - OK, otherwise - error code\n     */\n    int run(const char *command);\n\nprivate:\n    void prepare_web_command();\n    int read_result();\n};\n\nextern HiCat hicat;\n\n\n#endif // _HICAT_H_", 
            "title": "3.Arduino Libray API"
        }, 
        {
            "location": "/robotAssemGuide/", 
            "text": "The Robot kit Assembly Guide\n\n\n\n\nLike the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of \nphysical building and wiring,\n it might take around \n25 minutes\n to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.\n\n\nParts list\n\n\n\n\n\n\nThe Livera Robot kit comes with following parts:\n\n\n\n\nBoards:\n HICAT.Livera Boardx1 Livera Motor Driver Boardx1\n\n\nCamera:\n Livera Camera Extend Cablex1 Livera Camera Modulex1\n\n\nStorage:\n2G SD Card with firmware built in\n\n\nGuidebook:\n Livera GuideBookx1 Livera Robot Assembly GuideBookx1\n\n\nPower:\n 9V Lipo Battery and Bat Carrier\n\n\nMotor:\n E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2\n\n\nStructure bits:\n Robot Base Acrylic Panels set, Omni-directional Wheel Set \n\n\nScrews:\n M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4 \n\n\nOUTPUT:\n LASER Beanx1\n\n\nAccessories:\n Stickersx1, USB Cablex1, Screwdriver(+,-)x1\n\n\n\n\nVideo Tutorial\n\n\nWe've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:\n\n\n\n\nPyhsical Assembly\n\n\nWebapp Guide\n\n\n\n\n\n    \n\n\n\n\n\nStep 1: Base panel build\n\n\n\n\nUnpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.\n\n\n\n\nRobot Base Acrylic Panel x1\n\n\nDC Motor + Motor Carrier x2\n\n\nOmni-directional Wheel Set x1\n\n\nM2x15(+6)mm Nylon Stud x4\n\n\nM2x6mm Nylon Stud x4\n\n\nM2x6(+6)mm Nylon Stud x4\n\n\nM2 Nylon Nut x4\n\n\n\n\nNotice:\n All the Stud could be install by hand, doesn't require and tools.\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\nAssemble up the \nOmni-direction Wheel Set\n like the picture shows, then close up with the \nCover bit\n, waiting for screw on the \nBase Panel.\n \n\n\n\n\n\n\n\n\nInstall the motor on base panel:\n carefully place the \nM2 Nut\n onto the \nMotor Carrier's slot\n, than catch the \nDC Motor\n and match to the hole on the \nBase Panle\n, notice to keep the \n+\n sign on top as the left top of the pic shows, using \nM2x6(+6) Stud\n to screw through from the other side of the panel.\n\n\nInstall the Structure bit:\n place the \nM2x15(+6) Stud\n on top of the \nBase panel\n, then let the \n6mm screw bit\n through the hole and screw into the \nM2x6mm Stud.\n\n\n\n\nStep 2: Body build\n\n\n\n\n\n\nInstall the Livera Motor Driver:\n simply place by matching to the \nStud.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard. \n\n\n\n\n\n\nInstall HICAT.Livera with Extend Cable:\n carefully stack \nLivera\n on top of \nLivera Motor Driver,\n do check for the \nI/O ports\n and the \noutline\n to see weather it is matched to the \nLivera Motor Driver.\n\n\nInstall the Structure bit:\n Screw \nM2x10(+6)mm Stud\n on top of Livera.\n\n\n\n\nCaution:\n Don't make it too tight while screwing with the \nLivera and Livera Motor Driver\n, might have a small chance to cause damage to the board if you screw it too hard.\n\n\nStep 3: Top build\n\n\n\n\n\n\nInstall the top Acrylic Panel:\n place the \nTop Acrylic Panel\n, fix the panle by screw the \nM2x6(+6)mm Stud\n on top.\n\n\nStick the Power case and Servo:\n unpack the \n3M Sticker,\n stick the conponents as the image shows.\n\n\nConnect Power:\n connect the 2.54mm Power connector from \nPower case\n to \nLivera Motor Driver.\n\n\n\n\n\n\n\n\nInstall the Camera pan-tilt:\n screw the Servo Arm Set form the \nEMAX Servo set\n on the \nCamera Pan-tilt.\n\n\nInstall Camera Module:\n carefully place the camera module on the \nAcrylic Camera Pan-tilt\n, using \nM2 Rivet\n to fix it.\n\n\nInstall Camera Extend Cable and Laser Bean:\n install the conponents as the picture shows, notice that the \ndirection\n of the camera module should be \nmatch together\n according to the \nindicate drawings.\n\n\n\n\nStep 4: Wiring\n\n\n\n\n\n\nWiring:\n wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the \nDC Motor\n wring, you would need to use the screwdriver to fix the wire into the adapter.\n\n\nInstall SD card:\n put the \nSD card\n into the SD slot.\n\n\n\n\n\n\n\n\nInstall Battery:\n put the \n9v chargable battery\n into the \nPower Case.\n\n\nPower up to init the Servo:\n switch on the \nPower Switch\n From the Motor Driver, wait until heard \ntwo movement\n from the \nServo,\n then put the \nCamera Pan-tilt\n on the \nServo\n in a \nhorizon direction,\n screw it up using the smallest screw from the Servo Box.\n\n\nEnjoy:\n pick up you cell phone, connect to the \nLivera's wifi\n,\n\n\n\n\nssid:hicat_xxxxxx\npassward:88888888\n\n\n\n\nthen open \nchrome browser\n, go to the web page \n\n\nhttp://192.168.1.1/mmc/webapp/index.html\n\n\n\n\n\n\n\n\nSwitch the top video switcher to \nMJPG MODE\n, click \nLiveView\n, if the image flipped, you could change it within \nQUALITY,\n we suggest you to chose \n240p/15fps.\n\n\n\n\n\n\nClick \nROBOT\n to open the control panel, Try press forward button, if you see the robot \nspinning\n or \nmove back,\n you could adjust the wiring by switch the \nDC motor\n wire from the adapter.", 
            "title": "Robot Assembily Guide"
        }, 
        {
            "location": "/robotAssemGuide/#the-robot-kit-assembly-guide", 
            "text": "Like the picture shows, the Livera Robot kit ccomes with several conponents that you need you assemble and make it to a fully functional robot. This toturial would get you through all the process of  physical building and wiring,  it might take around  25 minutes  to make the robot alive. Clear up your desk, unpack the Robot kit and let begin the journey.", 
            "title": "The Robot kit Assembly Guide"
        }, 
        {
            "location": "/robotAssemGuide/#parts-list", 
            "text": "The Livera Robot kit comes with following parts:   Boards:  HICAT.Livera Boardx1 Livera Motor Driver Boardx1  Camera:  Livera Camera Extend Cablex1 Livera Camera Modulex1  Storage: 2G SD Card with firmware built in  Guidebook:  Livera GuideBookx1 Livera Robot Assembly GuideBookx1  Power:  9V Lipo Battery and Bat Carrier  Motor:  E-MAX SERVOx1 DC Gear Motor set(Motor + Motor Carrier + Wheels)x2  Structure bits:  Robot Base Acrylic Panels set, Omni-directional Wheel Set   Screws:  M2x15(+6)mm Nylon Studx4, M2x6mm Nylon Studx4, M2x6(+6)mm Nylon Studx8, M2x10(+6)mm Nylon Studx8, M2 Nylon Nutx4   OUTPUT:  LASER Beanx1  Accessories:  Stickersx1, USB Cablex1, Screwdriver(+,-)x1", 
            "title": "Parts list"
        }, 
        {
            "location": "/robotAssemGuide/#video-tutorial", 
            "text": "We've also created a video toturial to give you a more detailed, much clear step by step toturial, would help you with:   Pyhsical Assembly  Webapp Guide", 
            "title": "Video Tutorial"
        }, 
        {
            "location": "/robotAssemGuide/#step-1-base-panel-build", 
            "text": "Unpack the Livera Robot kit package, Find out the following conponents in order to build the base panel of the Robot.   Robot Base Acrylic Panel x1  DC Motor + Motor Carrier x2  Omni-directional Wheel Set x1  M2x15(+6)mm Nylon Stud x4  M2x6mm Nylon Stud x4  M2x6(+6)mm Nylon Stud x4  M2 Nylon Nut x4   Notice:  All the Stud could be install by hand, doesn't require and tools. Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.    Assemble up the  Omni-direction Wheel Set  like the picture shows, then close up with the  Cover bit , waiting for screw on the  Base Panel.       Install the motor on base panel:  carefully place the  M2 Nut  onto the  Motor Carrier's slot , than catch the  DC Motor  and match to the hole on the  Base Panle , notice to keep the  +  sign on top as the left top of the pic shows, using  M2x6(+6) Stud  to screw through from the other side of the panel.  Install the Structure bit:  place the  M2x15(+6) Stud  on top of the  Base panel , then let the  6mm screw bit  through the hole and screw into the  M2x6mm Stud.", 
            "title": "Step 1: Base panel build"
        }, 
        {
            "location": "/robotAssemGuide/#step-2-body-build", 
            "text": "Install the Livera Motor Driver:  simply place by matching to the  Stud.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.     Install HICAT.Livera with Extend Cable:  carefully stack  Livera  on top of  Livera Motor Driver,  do check for the  I/O ports  and the  outline  to see weather it is matched to the  Livera Motor Driver.  Install the Structure bit:  Screw  M2x10(+6)mm Stud  on top of Livera.   Caution:  Don't make it too tight while screwing with the  Livera and Livera Motor Driver , might have a small chance to cause damage to the board if you screw it too hard.", 
            "title": "Step 2: Body build"
        }, 
        {
            "location": "/robotAssemGuide/#step-3-top-build", 
            "text": "Install the top Acrylic Panel:  place the  Top Acrylic Panel , fix the panle by screw the  M2x6(+6)mm Stud  on top.  Stick the Power case and Servo:  unpack the  3M Sticker,  stick the conponents as the image shows.  Connect Power:  connect the 2.54mm Power connector from  Power case  to  Livera Motor Driver.     Install the Camera pan-tilt:  screw the Servo Arm Set form the  EMAX Servo set  on the  Camera Pan-tilt.  Install Camera Module:  carefully place the camera module on the  Acrylic Camera Pan-tilt , using  M2 Rivet  to fix it.  Install Camera Extend Cable and Laser Bean:  install the conponents as the picture shows, notice that the  direction  of the camera module should be  match together  according to the  indicate drawings.", 
            "title": "Step 3: Top build"
        }, 
        {
            "location": "/robotAssemGuide/#step-4-wiring", 
            "text": "Wiring:  wire up all the electronics(Motors, Laser, Servo) as the picture shows, for the  DC Motor  wring, you would need to use the screwdriver to fix the wire into the adapter.  Install SD card:  put the  SD card  into the SD slot.     Install Battery:  put the  9v chargable battery  into the  Power Case.  Power up to init the Servo:  switch on the  Power Switch  From the Motor Driver, wait until heard  two movement  from the  Servo,  then put the  Camera Pan-tilt  on the  Servo  in a  horizon direction,  screw it up using the smallest screw from the Servo Box.  Enjoy:  pick up you cell phone, connect to the  Livera's wifi ,   ssid:hicat_xxxxxx\npassward:88888888  then open  chrome browser , go to the web page   http://192.168.1.1/mmc/webapp/index.html    Switch the top video switcher to  MJPG MODE , click  LiveView , if the image flipped, you could change it within  QUALITY,  we suggest you to chose  240p/15fps.    Click  ROBOT  to open the control panel, Try press forward button, if you see the robot  spinning  or  move back,  you could adjust the wiring by switch the  DC motor  wire from the adapter.", 
            "title": "Step 4: Wiring"
        }
    ]
}